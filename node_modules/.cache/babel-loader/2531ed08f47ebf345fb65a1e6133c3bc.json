{"ast":null,"code":"var _jsxFileName = \"/home/el/Desktop/myReact/react-hello/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css'; //import logo from './goblin.png'\n//import moment from 'moment';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileList = ({\n  files\n}) => /*#__PURE__*/_jsxDEV(\"table\", {\n  className: \"filelist\",\n  children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: files.map(file =>\n    /*#__PURE__*/\n\n    /* now we use FileListItem here */\n    _jsxDEV(FileListItem, {\n      file: file\n    }, file.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 1\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 29\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 1\n}, this);\n\n_c = FileList;\nFileList.propTypes = {\n  files: PropTypes.array\n};\nconst testFiles = [{\n  id: 1,\n  name: 'src',\n  type: 'folder',\n  updated_at: \"2016-07-11 21:24:00\",\n  latestCommit: {\n    message: 'Initial commit'\n  }\n}, {\n  id: 2,\n  name: 'tests',\n  type: 'folder',\n  updated_at: \"2016-07-11 21:24:00\",\n  latestCommit: {\n    message: 'Initial commit'\n  }\n}, {\n  id: 3,\n  name: 'README',\n  type: 'file',\n  updated_at: \"2016-07-18 21:24:00\",\n  latestCommit: {\n    message: 'Added a readme'\n  }\n}];\n\nconst FileListItem = ({\n  file\n}) => /*#__PURE__*/_jsxDEV(\"tr\", {\n  className: \"filelist-item\",\n  children: [getFileName(file), /*#__PURE__*/_jsxDEV(CommitMessage, {\n    commit: file.latestCommit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"age\",\n    children: /*#__PURE__*/_jsxDEV(Time, {\n      time: file.updated_at\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 1\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 1\n}, this);\n\n_c2 = FileListItem;\nFileListItem.propTypes = {\n  file: PropTypes.object.isRequired\n};\n\nfunction FileIcon({\n  file\n}) {\n  let icon = 'fa-file-text-o';\n\n  if (file.type === 'folder') {\n    icon = 'fa-folder';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"file-icon\",\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      className: `fa ${icon}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 1\n  }, this);\n}\n\n_c3 = FileIcon;\nFileIcon.propTypes = {\n  file: PropTypes.object.isRequired\n};\n\nfunction getFileName(file) {\n  return [/*#__PURE__*/_jsxDEV(FileIcon, {\n    file: file\n  }, 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"file-name\",\n    children: file.name\n  }, 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 1\n  }, this)];\n}\n\nconst CommitMessage = ({\n  commit\n}) => /*#__PURE__*/_jsxDEV(\"td\", {\n  className: \"commitmessage\",\n  children: commit.message\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 86,\n  columnNumber: 1\n}, this);\n\n_c4 = CommitMessage;\nCommitMessage.propTypes = {\n  commit: PropTypes.object.isRequired\n};\n\nconst Time = ({\n  time\n}) => {\n  const timeString = time; //moment(time).fromNow();\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"time\",\n    children: timeString\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 11\n  }, this);\n};\n\n_c5 = Time;\nTime.propTypes = {\n  time: PropTypes.string\n};\nReactDOM.render( /*#__PURE__*/_jsxDEV(FileList, {\n  files: testFiles\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 104,\n  columnNumber: 3\n}, this), document.querySelector(\"#root\"));\n/*\n//TWEET\n\nfunction Tweet({tweet}) {\n  return (\n  <div className=\"tweet\">\n    <Avatar hash={tweet.gravatar}/>\n    <div className=\"content\">\n      <NameWithHandle author={tweet.author}/>\n      <Time time={tweet.timestamp}/>\n      <Message text={tweet.message}/>\n      <div className=\"buttons\">\n        <ReplyButton/>\n        <RetweetButton count={tweet.retweets}/>\n        <LikeButton count={tweet.likes}/>\n        <MoreOptionsButton/>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nTweet.propTypes = {\n  tweet: PropTypes.object.isRequired\n}\n\nvar testTweet = {\nmessage: \"Something about cats.\",\ngravatar: \"xyz\",\nauthor: {handle: \"catperson\", name: \"IAMA Cat Person\"},\nlikes: 5,\nretweets: 2,\ntimestamp: \"2016-07-30 21:24:37\"\n};\n\nfunction Avatar({ hash }) {\n  //var url = `https://www.gravatar.com/avatar/${hash}`;\n  return (<img src={logo} className=\"avatar\" alt=\"avatar\" />);\n}\n\nAvatar.propTypes = {\nhash: PropTypes.number\n};\n\nfunction Message({ text }) {\n  return (<div className=\"message\">{text}</div>);\n}\n\nMessage.propTypes = {\ntext: PropTypes.string\n};\n\nfunction NameWithHandle({ author }) {\n  const { name, handle } = author;\n  return (\n  <span className=\"namewith-handle\">\n    <span className=\"name\">{name}</span>\n    <span className=\"handle\">@{handle}</span>\n  </span>\n  );\n}\n\nNameWithHandle.propTypes = {\nauthor: PropTypes.shape({\nname: PropTypes.string.isRequired,\nhandle: PropTypes.string.isRequired\n}).isRequired\n};\n\nconst Time = ({ time }) => {\n  const timeString = time;//moment(time).fromNow();\n  return (<span className=\"time\">{timeString}</span>);\n};\n\nTime.propTypes = {\ntime: PropTypes.string\n};\n\nconst ReplyButton = () => (<i className=\"fa fa-reply reply-button\"/>);\n\nfunction getRetweetCount(count) {\n  if(count > 0) {\n    return (<span className=\"retweet-count\">{count}</span>);\n  } else {\n    return null;\n  }\n}\n\nconst RetweetButton = ({ count }) => (\n<span className=\"retweetbutton\">\n<i className=\"fa fa-retweet\"/>\n{getRetweetCount(count)}\n</span>\n);\n\nRetweetButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst LikeButton = ({ count }) => (\n<span className=\"likebutton\">\n  <i className=\"fa fa-heart\"/>\n  {count > 0 && <span className=\"like-count\">{count}</span>}\n</span>\n);\n\nLikeButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst MoreOptionsButton = () => (\n<i className=\"fa fa-ellipsis-h more-options-button\"/>\n);\n\nReactDOM.render(<Tweet tweet={testTweet}/>, document.querySelector('#root'));\n*/\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"FileList\");\n$RefreshReg$(_c2, \"FileListItem\");\n$RefreshReg$(_c3, \"FileIcon\");\n$RefreshReg$(_c4, \"CommitMessage\");\n$RefreshReg$(_c5, \"Time\");","map":{"version":3,"sources":["/home/el/Desktop/myReact/react-hello/src/index.js"],"names":["React","ReactDOM","PropTypes","FileList","files","map","file","id","propTypes","array","testFiles","name","type","updated_at","latestCommit","message","FileListItem","getFileName","object","isRequired","FileIcon","icon","CommitMessage","commit","Time","time","timeString","string","render","document","querySelector"],"mappings":"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":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\n//import logo from './goblin.png'\n//import moment from 'moment';\n\nconst FileList = ({ files }) => (\n<table className=\"filelist\"><tbody>\n{files.map(file =>\n/* now we use FileListItem here */\n<FileListItem key={file.id} file={file}/>\n)}\n</tbody>\n</table>\n);\nFileList.propTypes = {\nfiles: PropTypes.array\n};\n\nconst testFiles = [{\nid: 1,\nname: 'src',\ntype: 'folder',\nupdated_at: \"2016-07-11 21:24:00\",\nlatestCommit: {\nmessage: 'Initial commit'\n}\n},\n{\nid: 2,\nname: 'tests',\ntype: 'folder',\nupdated_at: \"2016-07-11 21:24:00\",\nlatestCommit: {\nmessage: 'Initial commit'\n}\n},\n{\nid: 3,\nname: 'README',\ntype: 'file',\nupdated_at: \"2016-07-18 21:24:00\",\nlatestCommit: {\nmessage: 'Added a readme'\n}\n},\n];\n\nconst FileListItem = ({ file }) => (\n<tr className=\"filelist-item\">\n{getFileName(file)}\n<CommitMessage commit={file.latestCommit} />\n<td className=\"age\"><Time time={file.updated_at}/></td>\n</tr>\n);\n\nFileListItem.propTypes = {\nfile: PropTypes.object.isRequired\n};\n\nfunction FileIcon({ file }) {\nlet icon = 'fa-file-text-o';\nif(file.type === 'folder') {\nicon = 'fa-folder';\n}\nreturn (\n<td className=\"file-icon\">\n<i className={`fa ${icon}`}/>\n</td>\n);\n}\nFileIcon.propTypes = {\nfile: PropTypes.object.isRequired\n};\n\nfunction getFileName(file) {\nreturn [\n<FileIcon file={file} key={0}/>,\n<td className=\"file-name\" key={1}>{file.name}</td>\n];\n}\n\nconst CommitMessage = ({ commit }) => (\n<td className=\"commitmessage\">\n{commit.message}\n</td>\n);\nCommitMessage.propTypes = {\ncommit: PropTypes.object.isRequired\n};\n\nconst Time = ({ time }) => {\n  const timeString = time;//moment(time).fromNow();\n  return (<span className=\"time\">{timeString}</span>);\n};\n\nTime.propTypes = {\ntime: PropTypes.string\n};\n\nReactDOM.render(\n  <FileList files={testFiles}/>,\n  document.querySelector(\"#root\")\n);\n\n/*\n//TWEET\n\nfunction Tweet({tweet}) {\n  return (\n  <div className=\"tweet\">\n    <Avatar hash={tweet.gravatar}/>\n    <div className=\"content\">\n      <NameWithHandle author={tweet.author}/>\n      <Time time={tweet.timestamp}/>\n      <Message text={tweet.message}/>\n      <div className=\"buttons\">\n        <ReplyButton/>\n        <RetweetButton count={tweet.retweets}/>\n        <LikeButton count={tweet.likes}/>\n        <MoreOptionsButton/>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nTweet.propTypes = {\n  tweet: PropTypes.object.isRequired\n}\n\nvar testTweet = {\nmessage: \"Something about cats.\",\ngravatar: \"xyz\",\nauthor: {handle: \"catperson\", name: \"IAMA Cat Person\"},\nlikes: 5,\nretweets: 2,\ntimestamp: \"2016-07-30 21:24:37\"\n};\n\nfunction Avatar({ hash }) {\n  //var url = `https://www.gravatar.com/avatar/${hash}`;\n  return (<img src={logo} className=\"avatar\" alt=\"avatar\" />);\n}\n\nAvatar.propTypes = {\nhash: PropTypes.number\n};\n\nfunction Message({ text }) {\n  return (<div className=\"message\">{text}</div>);\n}\n\nMessage.propTypes = {\ntext: PropTypes.string\n};\n\nfunction NameWithHandle({ author }) {\n  const { name, handle } = author;\n  return (\n  <span className=\"namewith-handle\">\n    <span className=\"name\">{name}</span>\n    <span className=\"handle\">@{handle}</span>\n  </span>\n  );\n}\n\nNameWithHandle.propTypes = {\nauthor: PropTypes.shape({\nname: PropTypes.string.isRequired,\nhandle: PropTypes.string.isRequired\n}).isRequired\n};\n\nconst Time = ({ time }) => {\n  const timeString = time;//moment(time).fromNow();\n  return (<span className=\"time\">{timeString}</span>);\n};\n\nTime.propTypes = {\ntime: PropTypes.string\n};\n\nconst ReplyButton = () => (<i className=\"fa fa-reply reply-button\"/>);\n\nfunction getRetweetCount(count) {\n  if(count > 0) {\n    return (<span className=\"retweet-count\">{count}</span>);\n  } else {\n    return null;\n  }\n}\n\nconst RetweetButton = ({ count }) => (\n<span className=\"retweetbutton\">\n<i className=\"fa fa-retweet\"/>\n{getRetweetCount(count)}\n</span>\n);\n\nRetweetButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst LikeButton = ({ count }) => (\n<span className=\"likebutton\">\n  <i className=\"fa fa-heart\"/>\n  {count > 0 && <span className=\"like-count\">{count}</span>}\n</span>\n);\n\nLikeButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst MoreOptionsButton = () => (\n<i className=\"fa fa-ellipsis-h more-options-button\"/>\n);\n\nReactDOM.render(<Tweet tweet={testTweet}/>, document.querySelector('#root'));\n*/"]},"metadata":{},"sourceType":"module"}