{"ast":null,"code":"var _jsxFileName = \"/home/el/Desktop/myReact/react-hello/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport logo from './goblin.png'; //import moment from 'moment';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileList = ({\n  files\n}) => /*#__PURE__*/_jsxDEV(\"table\", {\n  className: \"filelist\",\n  children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: files.map(file =>\n    /*#__PURE__*/\n\n    /* now we use FileListItem here */\n    _jsxDEV(FileListItem, {\n      file: file\n    }, file.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 1\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 29\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 1\n}, this);\n\n_c = FileList;\nFileList.propTypes = {\n  files: PropTypes.array\n};\n\nconst FileListItem = ({\n  file\n}) =>\n/*#__PURE__*/\n\n/* this code has been extracted from FileList */\n_jsxDEV(\"tr\", {\n  className: \"filelist-item\",\n  children: /*#__PURE__*/_jsxDEV(\"td\", {\n    className: \"file-name\",\n    children: file.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 1\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 1\n}, this);\n\n_c2 = FileListItem;\nFileListItem.propTypes = {\n  file: PropTypes.object.isRequired\n};\n/*\n//TWEET\n\nfunction Tweet({tweet}) {\n  return (\n  <div className=\"tweet\">\n    <Avatar hash={tweet.gravatar}/>\n    <div className=\"content\">\n      <NameWithHandle author={tweet.author}/>\n      <Time time={tweet.timestamp}/>\n      <Message text={tweet.message}/>\n      <div className=\"buttons\">\n        <ReplyButton/>\n        <RetweetButton count={tweet.retweets}/>\n        <LikeButton count={tweet.likes}/>\n        <MoreOptionsButton/>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nTweet.propTypes = {\n  tweet: PropTypes.object.isRequired\n}\n\nvar testTweet = {\nmessage: \"Something about cats.\",\ngravatar: \"xyz\",\nauthor: {handle: \"catperson\", name: \"IAMA Cat Person\"},\nlikes: 5,\nretweets: 2,\ntimestamp: \"2016-07-30 21:24:37\"\n};\n\nfunction Avatar({ hash }) {\n  //var url = `https://www.gravatar.com/avatar/${hash}`;\n  return (<img src={logo} className=\"avatar\" alt=\"avatar\" />);\n}\n\nAvatar.propTypes = {\nhash: PropTypes.number\n};\n\nfunction Message({ text }) {\n  return (<div className=\"message\">{text}</div>);\n}\n\nMessage.propTypes = {\ntext: PropTypes.string\n};\n\nfunction NameWithHandle({ author }) {\n  const { name, handle } = author;\n  return (\n  <span className=\"namewith-handle\">\n    <span className=\"name\">{name}</span>\n    <span className=\"handle\">@{handle}</span>\n  </span>\n  );\n}\n\nNameWithHandle.propTypes = {\nauthor: PropTypes.shape({\nname: PropTypes.string.isRequired,\nhandle: PropTypes.string.isRequired\n}).isRequired\n};\n\nconst Time = ({ time }) => {\n  const timeString = time;//moment(time).fromNow();\n  return (<span className=\"time\">{timeString}</span>);\n};\n\nTime.propTypes = {\ntime: PropTypes.string\n};\n\nconst ReplyButton = () => (<i className=\"fa fa-reply reply-button\"/>);\n\nfunction getRetweetCount(count) {\n  if(count > 0) {\n    return (<span className=\"retweet-count\">{count}</span>);\n  } else {\n    return null;\n  }\n}\n\nconst RetweetButton = ({ count }) => (\n<span className=\"retweetbutton\">\n<i className=\"fa fa-retweet\"/>\n{getRetweetCount(count)}\n</span>\n);\n\nRetweetButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst LikeButton = ({ count }) => (\n<span className=\"likebutton\">\n  <i className=\"fa fa-heart\"/>\n  {count > 0 && <span className=\"like-count\">{count}</span>}\n</span>\n);\n\nLikeButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst MoreOptionsButton = () => (\n<i className=\"fa fa-ellipsis-h more-options-button\"/>\n);\n\nReactDOM.render(<Tweet tweet={testTweet}/>, document.querySelector('#root'));\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FileList\");\n$RefreshReg$(_c2, \"FileListItem\");","map":{"version":3,"sources":["/home/el/Desktop/myReact/react-hello/src/index.js"],"names":["React","ReactDOM","PropTypes","logo","FileList","files","map","file","id","propTypes","array","FileListItem","name","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,aAAP;AACA,OAAO,uCAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB,C,CACA;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACjB;AAAO,EAAA,SAAS,EAAC,UAAjB;AAAA,yBAA4B;AAAA,cAC3BA,KAAK,CAACC,GAAN,CAAUC,IAAI;AAAA;;AACf;AACA,YAAC,YAAD;AAA4B,MAAA,IAAI,EAAEA;AAAlC,OAAmBA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,YAFC;AAD2B;AAAA;AAAA;AAAA;AAAA;AAA5B;AAAA;AAAA;AAAA;AAAA,QADA;;KAAMJ,Q;AASNA,QAAQ,CAACK,SAAT,GAAqB;AACrBJ,EAAAA,KAAK,EAAEH,SAAS,CAACQ;AADI,CAArB;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAAEJ,EAAAA;AAAF,CAAD;AAAA;;AACrB;AACA;AAAI,EAAA,SAAS,EAAC,eAAd;AAAA,yBACA;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA,cAA2BA,IAAI,CAACK;AAAhC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,QAFA;;MAAMD,Y;AAMNA,YAAY,CAACF,SAAb,GAAyB;AACzBF,EAAAA,IAAI,EAAEL,SAAS,CAACW,MAAV,CAAiBC;AADE,CAAzsourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport logo from './goblin.png'\n//import moment from 'moment';\n\nconst FileList = ({ files }) => (\n<table className=\"filelist\"><tbody>\n{files.map(file =>\n/* now we use FileListItem here */\n<FileListItem key={file.id} file={file}/>\n)}\n</tbody>\n</table>\n);\nFileList.propTypes = {\nfiles: PropTypes.array\n};\nconst FileListItem = ({ file }) => (\n/* this code has been extracted from FileList */\n<tr className=\"filelist-item\">\n<td className=\"file-name\">{file.name}</td>\n</tr>\n);\nFileListItem.propTypes = {\nfile: PropTypes.object.isRequired\n};\n\n\n\n/*\n//TWEET\n\nfunction Tweet({tweet}) {\n  return (\n  <div className=\"tweet\">\n    <Avatar hash={tweet.gravatar}/>\n    <div className=\"content\">\n      <NameWithHandle author={tweet.author}/>\n      <Time time={tweet.timestamp}/>\n      <Message text={tweet.message}/>\n      <div className=\"buttons\">\n        <ReplyButton/>\n        <RetweetButton count={tweet.retweets}/>\n        <LikeButton count={tweet.likes}/>\n        <MoreOptionsButton/>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nTweet.propTypes = {\n  tweet: PropTypes.object.isRequired\n}\n\nvar testTweet = {\nmessage: \"Something about cats.\",\ngravatar: \"xyz\",\nauthor: {handle: \"catperson\", name: \"IAMA Cat Person\"},\nlikes: 5,\nretweets: 2,\ntimestamp: \"2016-07-30 21:24:37\"\n};\n\nfunction Avatar({ hash }) {\n  //var url = `https://www.gravatar.com/avatar/${hash}`;\n  return (<img src={logo} className=\"avatar\" alt=\"avatar\" />);\n}\n\nAvatar.propTypes = {\nhash: PropTypes.number\n};\n\nfunction Message({ text }) {\n  return (<div className=\"message\">{text}</div>);\n}\n\nMessage.propTypes = {\ntext: PropTypes.string\n};\n\nfunction NameWithHandle({ author }) {\n  const { name, handle } = author;\n  return (\n  <span className=\"namewith-handle\">\n    <span className=\"name\">{name}</span>\n    <span className=\"handle\">@{handle}</span>\n  </span>\n  );\n}\n\nNameWithHandle.propTypes = {\nauthor: PropTypes.shape({\nname: PropTypes.string.isRequired,\nhandle: PropTypes.string.isRequired\n}).isRequired\n};\n\nconst Time = ({ time }) => {\n  const timeString = time;//moment(time).fromNow();\n  return (<span className=\"time\">{timeString}</span>);\n};\n\nTime.propTypes = {\ntime: PropTypes.string\n};\n\nconst ReplyButton = () => (<i className=\"fa fa-reply reply-button\"/>);\n\nfunction getRetweetCount(count) {\n  if(count > 0) {\n    return (<span className=\"retweet-count\">{count}</span>);\n  } else {\n    return null;\n  }\n}\n\nconst RetweetButton = ({ count }) => (\n<span className=\"retweetbutton\">\n<i className=\"fa fa-retweet\"/>\n{getRetweetCount(count)}\n</span>\n);\n\nRetweetButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst LikeButton = ({ count }) => (\n<span className=\"likebutton\">\n  <i className=\"fa fa-heart\"/>\n  {count > 0 && <span className=\"like-count\">{count}</span>}\n</span>\n);\n\nLikeButton.propTypes = {\ncount: PropTypes.number\n};\n\nconst MoreOptionsButton = () => (\n<i className=\"fa fa-ellipsis-h more-options-button\"/>\n);\n\nReactDOM.render(<Tweet tweet={testTweet}/>, document.querySelector('#root'));\n*/"]},"metadata":{},"sourceType":"module"}